---
import PostSnippet from "@/components/blocks/post-snippet.astro"
import Heading2 from "@/components/mdx/heading-2.astro"
import Heading3 from "@/components/mdx/heading-3.astro"
import Heading4 from "@/components/mdx/heading-4.astro"
import Heading5 from "@/components/mdx/heading-5.astro"
import Heading6 from "@/components/mdx/heading-6.astro"
import Link from "@/components/ui/link.astro"
import ArticleLayout from "@/layouts/article-layout.astro"
import BaseLayout from "@/layouts/base-layout.astro"
import { getAllArticles, getAllCategories } from "@/lib/content"
import { slugify } from "@/lib/utils"
import { render, type CollectionEntry } from "astro:content"

export async function getStaticPaths() {
  const articles = await getAllArticles()
  const categories = await getAllCategories()

  const articlesMap = articles.map((article) => {
    const categorySlug = slugify(article.data.category)
    const articleUrl = `${categorySlug}/${article.id}`

    return {
      params: {
        route: articleUrl,
      },
      props: { article },
    }
  })

  const categoriesMap = categories.map((category) => ({
    params: { route: category.id },
    props: { category },
  }))

  return [...articlesMap, ...categoriesMap]
}

// Get path
const { route } = Astro.params

const articles = await getAllArticles()
const categories = await getAllCategories()

// Check if the route is a category (exact match)
const isCategory = categories.some((category) => category.id === route)

let article: CollectionEntry<"articles"> | undefined
let category: { id: string; name: string; url: string } | undefined
let categoryArticles: CollectionEntry<"articles">[] = []
let Content: any
let headings: any[] = []
let remarkPluginFrontmatter: any

if (!isCategory) {
  // Split the route into category and article ID
  const [categorySlug, articleId] = route.split("/")

  // Find the article
  article = articles.find(
    (article) =>
      slugify(article.data.category) === categorySlug &&
      article.id === articleId,
  )

  if (!article) {
    return new Response("Not found", { status: 404 })
  }

  // Render the article content
  const renderedArticle = await render(article)
  Content = renderedArticle.Content
  headings = renderedArticle.headings || []
  remarkPluginFrontmatter = renderedArticle.remarkPluginFrontmatter
} else {
  // It's a category, show all articles in that category
  category = categories.find((cat) => cat.id === route)
  categoryArticles = articles.filter(
    (article) => slugify(article.data.category) === route,
  )
}
---

{
  isCategory ? (
    <BaseLayout
      title="Articles & Guides"
      description="A collection of handwritten thoughts on web development, and interactive guides on building better web experiences"
    >
      <div class="grid w-full grid-cols-1 gap-4 md:grid-cols-[2fr_1fr] lg:grid-cols-[1.5fr_1fr]">
        <section>
          <h2 class="text-muted-foreground mb-4 text-sm">Stuff to read</h2>

          {categoryArticles.map((article) => (
            <PostSnippet post={article} />
          ))}
        </section>
      </div>
    </BaseLayout>
  ) : (
    <ArticleLayout
      title={remarkPluginFrontmatter.title}
      frontmatter={remarkPluginFrontmatter}
      headings={headings}
    >
      <Content
        components={{
          a: Link,
          h2: Heading2,
          h3: Heading3,
          h4: Heading4,
          h5: Heading5,
          h6: Heading6,
        }}
        headings={headings}
      />
    </ArticleLayout>
  )
}
