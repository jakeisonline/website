---
import "../styles/globals.css"
import { SEO } from "astro-seo"
import GlobalHeader from "@/components/blocks/global-header.astro"
import GlobalFooter from "@/components/blocks/global-footer.astro"

interface Props {
  title: string
  ogTitle?: string
  description: string
  ogDescription?: string
  ogImage?: string
}

const {
  title,
  ogTitle,
  description,
  ogDescription,
  ogImage = "opengraph-image.png",
} = Astro.props
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme")
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light"
  }

  const isDark = getThemePreference() === "dark"
  document.documentElement.classList[isDark ? "add" : "remove"]("dark")

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark")
      localStorage.setItem("theme", isDark ? "dark" : "light")
    })
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    })
  }

  document.addEventListener("astro:before-swap", function (event) {
    const prefersDarkMode = getThemePreference() === "dark"

    event.newDocument.documentElement.classList[
      prefersDarkMode ? "add" : "remove"
    ]("dark")
  })
</script>

<html lang="en" class="font-sans">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <SEO
      title={title}
      description={description}
      extend={{
        link: [
          {
            rel: "icon",
            type: "image/svg+xml",
            href: "/favicon.svg",
          },
          {
            rel: "sitemap",
            href: "/sitemap-index.xml",
          },
        ],
      }}
      openGraph={{
        basic: {
          type: "website",
          title: ogTitle || title,
          url: `${import.meta.env.SITE}`,
          image: `${import.meta.env.SITE}/${ogImage}`,
        },
        optional: {
          description: ogDescription || description,
          locale: "en_GB",
          siteName: "jakeisonline",
        },
      }}
      twitter={{
        card: "summary",
        title: ogTitle || title,
        description: ogDescription || description,
        image: `${import.meta.env.SITE}/${ogImage}`,
      }}
    />
  </head>
  <body
    class="min-h-dvh bg-background overflow-y-scroll flex flex-col items-center"
  >
    <GlobalHeader />
    <main
      class="container-page w-full flex flex-row justify-center items-center"
    >
      <slot />
    </main>
    <GlobalFooter />
  </body>
</html>
