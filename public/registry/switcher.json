{
  "name": "switcher",
  "type": "registry:ui",
  "description": "A segmented switch controller component",
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  SwitcherContextProvider,\n  useSwitcher,\n} from \"@/hooks/use-switcher\"\nimport React, { useEffect, useRef } from \"react\"\n\ntype SwitcherProps = {\n  defaultValue: string\n  children: React.ReactNode\n  className?: string\n  role?: string\n}\n\nexport const Switcher = ({\n  defaultValue,\n  children,\n  className,\n  role,\n  ...props\n}: SwitcherProps) => {\n  const stuffedProps = { ...props, defaultValue, className, role }\n\n  return (\n    <SwitcherContextProvider defaultValue={defaultValue}>\n      <SwitcherMapper {...stuffedProps}>{children}</SwitcherMapper>\n    </SwitcherContextProvider>\n  )\n}\nSwitcher.displayName = \"Switcher\"\n\ninterface SwitcherMapperProps {\n  children: React.ReactNode\n  className?: string\n  role?: string\n}\n\nconst SwitcherMapper = ({\n  children,\n  className,\n  role,\n  ...props\n}: SwitcherMapperProps) => {\n  const { setValues } = useSwitcher()\n  const controlValues: string[] = []\n\n  React.Children.forEach(children, (child) => {\n    if (\n      React.isValidElement(child) &&\n      (child as React.ReactElement<SwitcherItemProps>).props.value\n    ) {\n      controlValues.push(\n        (child as React.ReactElement<SwitcherItemProps>).props.value,\n      )\n    }\n\n    setValues(controlValues)\n  })\n\n  return (\n    <div\n      className={cn(\n        \"bg-accent flex gap-1 rounded-md p-1 shadow-inner\",\n        className,\n      )}\n      role={role || \"radiogroup\"}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\ninterface SwitcherItemProps extends React.ComponentPropsWithoutRef<\"button\"> {\n  value: string\n  children: React.ReactNode\n  disabled?: boolean\n  className?: string\n  role?: string\n  ariaChecked?: boolean\n}\n\nexport const SwitcherItem = ({\n  value,\n  children,\n  className,\n  disabled,\n  role,\n  ...props\n}: SwitcherItemProps) => {\n  const { selectItem, selectedValue, selectNextItem } = useSwitcher()\n  const selfRef = useRef<HTMLButtonElement>(null)\n  const isSelected = selectedValue === value\n  const hasMounted = useRef(false)\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (disabled) return\n    selectItem(value)\n    e.currentTarget.dataset.state = \"active\"\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (e.key === \"ArrowRight\") selectNextItem(\"next\")\n    if (e.key === \"ArrowLeft\") selectNextItem(\"previous\")\n  }\n\n  useEffect(() => {\n    if (isSelected && hasMounted.current) {\n      selfRef.current?.focus()\n    }\n\n    hasMounted.current = true\n  }, [isSelected])\n\n  return (\n    <button\n      aria-disabled={disabled}\n      aria-checked={isSelected}\n      aria-selected={isSelected}\n      className={cn(\n        \"bg-accent text-muted-foreground focus:outline-primary data-[state=active]:bg-background data-[state=active]:text-foreground cursor-pointer rounded-sm px-4 py-1 transition-colors duration-300 disabled:cursor-not-allowed data-[state=active]:shadow\",\n        className,\n      )}\n      data-state={isSelected ? \"active\" : \"inactive\"}\n      disabled={disabled}\n      role={role || \"radio\"}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={isSelected ? 0 : -1}\n      value={value}\n      ref={selfRef}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\nSwitcherItem.displayName = \"SwitcherItem\"\n",
      "path": "ui/switcher.tsx",
      "target": "components/ui/switcher.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { createContext, useContext, useRef, useState } from \"react\"\n\nexport const useSwitcher = () => {\n  const context = useContext(SwitcherContext)\n\n  if (!context) {\n    throw new Error(\"useSwitcher must be used within a SwitcherContextProvider\")\n  }\n\n  return context\n}\n\ntype SwitcherContextType = {\n  selectedValue: string | null\n  selectItem: (value: string) => void\n  setValues: (value: string[]) => void\n  selectNextItem: (direction: \"next\" | \"previous\") => void\n}\n\nexport const SwitcherContext = createContext<SwitcherContextType>({\n  selectedValue: null,\n  selectItem: () => {},\n  setValues: () => {},\n  selectNextItem: () => {},\n})\n\ntype SwitcherContextProviderProps = {\n  defaultValue: string\n  children: React.ReactNode\n}\n\nexport const SwitcherContextProvider = ({\n  defaultValue,\n  children,\n}: SwitcherContextProviderProps) => {\n  const [selectedValue, setSelectedValue] = useState<string>(defaultValue)\n  const values = useRef<string[]>([])\n\n  const setValues = (value: string[]) => {\n    values.current = value\n  }\n\n  const selectItem = (value: string) => {\n    setSelectedValue(value)\n  }\n\n  const selectNextItem = (direction: \"next\" | \"previous\") => {\n    const currentIndex = values.current.indexOf(selectedValue)\n    const nextIndex =\n      direction === \"next\"\n        ? (currentIndex + 1) % values.current.length\n        : (currentIndex - 1 + values.current.length) % values.current.length\n    setSelectedValue(values.current[nextIndex])\n  }\n\n  return (\n    <SwitcherContext.Provider\n      value={{\n        selectedValue,\n        selectItem,\n        setValues,\n        selectNextItem,\n      }}\n    >\n      {children}\n    </SwitcherContext.Provider>\n  )\n}\n",
      "path": "hooks/use-switcher.tsx",
      "target": "hooks/use-switcher.tsx"
    }
  ]
}