{
  "name": "range",
  "type": "registry:ui",
  "description": "A range component",
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport { useRef, useState, useEffect, createContext, useContext } from \"react\"\n\ninterface RangeProps {\n  minRange: number\n  maxRange: number\n  initialLowValue?: number\n  initialHighValue?: number\n  children?: React.ReactNode\n}\n\nexport const Range = ({\n  minRange,\n  maxRange,\n  initialLowValue,\n  initialHighValue,\n  children,\n}: RangeProps) => {\n  return (\n    <RangeContextProvider\n      min={minRange}\n      max={maxRange}\n      low={initialLowValue}\n      high={initialHighValue}\n    >\n      <div className=\"min-h-8 w-full py-4\">{children}</div>\n    </RangeContextProvider>\n  )\n}\n\ninterface RangeBarProps {\n  children: React.ReactNode\n}\n\nconst RangeBarWidthContext = createContext(0)\n\nexport const RangeBar = ({ children }: RangeBarProps) => {\n  const { setBarWidth } = useRangeContext()\n  const ref = useRef<HTMLInputElement | null>(null)\n  const [width, setWidth] = useState(0)\n\n  useEffect(() => {\n    if (ref.current && ref.current.offsetWidth > 0) {\n      setBarWidth(ref.current.offsetWidth)\n      setWidth(ref.current.offsetWidth)\n    }\n  }, [setBarWidth])\n\n  return (\n    <RangeBarWidthContext.Provider value={width}>\n      <div\n        ref={ref}\n        className=\"flex h-1 flex-none touch-none flex-row items-center rounded-full bg-blue-100\"\n      >\n        {children}\n      </div>\n    </RangeBarWidthContext.Provider>\n  )\n}\n\nexport const useRangeBarContext = () => {\n  const context = useContext(RangeBarWidthContext)\n  return context\n}\n\nexport const RangeFill = ({ ...props }) => {\n  const barWidth = useRangeBarContext()\n  if (!barWidth) return\n  return <div {...props}></div>\n}\n\ninterface RangeGrabberProps {\n  \"type\": string\n  \"aria-label\": string\n}\n\nexport const RangeGrabber = ({ type }: RangeGrabberProps) => {\n  const {\n    currentValues,\n    handlePointerDown,\n    handlePointerMove,\n    handlePointerUp,\n    getGrabberPosition,\n  } = useRangeContext()\n\n  const barWidth = useRangeBarContext()\n\n  if (!barWidth) return\n\n  const initialValue = type === \"low\" ? currentValues.low : currentValues.high\n  const grabberPosition = getGrabberPosition(initialValue)\n\n  const doPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n    handlePointerDown(e, type)\n\n    document.addEventListener(\"pointerup\", handlePointerUp)\n    document.addEventListener(\"pointermove\", handlePointerMove)\n  }\n\n  const style =\n    type === \"low\"\n      ? { marginLeft: grabberPosition }\n      : { marginRight: barWidth - grabberPosition }\n\n  return (\n    <div\n      style={style}\n      className=\"group relative cursor-pointer select-none\"\n      onPointerDown={doPointerDown}\n    >\n      <div className=\"flex flex-col items-center\">\n        <div className=\"bg-foreground group-hover:bg-foreground/80 absolute inline-block -translate-y-7 rounded-md group-active:shadow-lg\">\n          <span className=\"text-background px-1.5 py-1 text-sm\">\n            {initialValue}\n          </span>\n        </div>\n        <div className=\"h-3.5 w-3.5 rounded-full border-4 border-blue-600 bg-white group-hover:border-blue-500 group-active:shadow-md group-active:shadow-blue-600/20\"></div>\n      </div>\n    </div>\n  )\n}\n\nconst useRangeContext = () => {\n  const context = useContext(RangeContext)\n\n  if (!context) {\n    throw new Error(\n      \"useRangeContext must be used within a RangeContextProvider\",\n    )\n  }\n\n  return context\n}\n\ninterface RangeContextType {\n  handlePointerDown: (\n    e: React.PointerEvent<HTMLDivElement>,\n    grabberType: string,\n  ) => void\n  handlePointerMove: (e: Event) => void\n  handlePointerUp: () => void\n  setBarWidth: (width: number) => void\n  getGrabberPosition: (value: number) => number\n  currentValues: { min: number; max: number; low: number; high: number }\n  setCurrentValues: (values: {\n    min: number\n    max: number\n    low: number\n    high: number\n  }) => void\n}\n\nconst RangeContext = createContext<RangeContextType>({\n  handlePointerDown: () => {},\n  handlePointerMove: () => {},\n  handlePointerUp: () => {},\n  setBarWidth: () => {},\n  getGrabberPosition: () => 0,\n  currentValues: { min: 0, max: 100, low: 0, high: 100 },\n  setCurrentValues: () => {},\n})\n\ninterface RangeContextProviderProps {\n  min: number\n  max: number\n  low?: number\n  high?: number\n  children: React.ReactNode\n}\n\nconst RangeContextProvider = ({\n  min,\n  max,\n  low,\n  high,\n  children,\n}: RangeContextProviderProps) => {\n  const [currentValues, setCurrentValues] = useState({\n    min: min,\n    max: max,\n    low: low ? low : min,\n    high: high ? high : max,\n  })\n\n  const grabberPositions = useRef({\n    low: 0,\n    high: 0,\n  })\n\n  const mouseOffset = useRef({\n    low: 0,\n    high: 0,\n  })\n\n  const [barWidth, setBarWidth] = useState(0)\n\n  const draggingEvent = useRef({\n    isDragging: false,\n    draggingType: \"\",\n  })\n\n  const handlePointerDown = (\n    e: React.PointerEvent<HTMLDivElement>,\n    grabberType: string,\n  ) => {\n    updateDraggingEvent({\n      isDragging: true,\n      draggingType: grabberType,\n    })\n\n    updateMouseOffset(grabberType, e.clientX)\n  }\n\n  // TODO: correctly type, but events suck and this works\n  const handlePointerMove = (e: any) => {\n    if (!draggingEvent.current.isDragging) return\n    const grabberType = draggingEvent.current.draggingType\n\n    handleGrabberMove(grabberType, e)\n  }\n\n  const handlePointerUp = () => {\n    updateDraggingEvent({\n      isDragging: false,\n      draggingType: \"\",\n    })\n\n    document.removeEventListener(\"mousemove\", handlePointerMove)\n    document.removeEventListener(\"mouseup\", handlePointerUp)\n  }\n\n  const handleGrabberMove = (\n    type: string,\n    e: React.PointerEvent<HTMLDivElement>,\n  ) => {\n    const newPosition =\n      mouseOffset.current[type as keyof typeof mouseOffset.current] !== 0\n        ? e.clientX -\n          mouseOffset.current[type as keyof typeof mouseOffset.current]\n        : getNewGrabberPosition(currentValues.low)\n    const newValue = Math.round(newPosition / (barWidth / currentValues.max))\n\n    if (!canMoveGrabber(type, newValue)) return\n\n    const updatedPosition = { [type]: newPosition }\n    grabberPositions.current = {\n      ...grabberPositions.current,\n      ...updatedPosition,\n    }\n\n    const updatedValue = { [type]: newValue }\n    setCurrentValues((currentValues) => ({\n      ...currentValues,\n      ...updatedValue,\n    }))\n  }\n\n  const updateDraggingEvent = (newEvent: {\n    isDragging: boolean\n    draggingType: string\n  }) => {\n    draggingEvent.current = newEvent\n  }\n\n  const updateMouseOffset = (grabberType: string, clientX: number) => {\n    const value = grabberType === \"low\" ? currentValues.low : currentValues.high\n\n    const newValue =\n      grabberPositions.current[\n        grabberType as keyof typeof grabberPositions.current\n      ] === 0 &&\n      mouseOffset.current[\n        grabberType as keyof typeof grabberPositions.current\n      ] === 0\n        ? clientX - getNewGrabberPosition(value)\n        : clientX -\n          grabberPositions.current[\n            grabberType as keyof typeof grabberPositions.current\n          ]\n\n    const updatedMouseOffset = {\n      [grabberType]: newValue,\n    }\n\n    mouseOffset.current = {\n      ...mouseOffset.current,\n      ...updatedMouseOffset,\n    }\n  }\n\n  const canMoveGrabber = (type: string, newValue: number) => {\n    if (type === \"low\") {\n      return (\n        newValue >= currentValues.min && newValue <= currentValues.high - 15\n      )\n    } else {\n      return newValue <= currentValues.max && newValue >= currentValues.low + 15\n    }\n  }\n\n  const getGrabberPosition = (value: number) => {\n    return (barWidth / currentValues.max) * value\n  }\n\n  const getNewGrabberPosition = (value: number) => {\n    return (barWidth / currentValues.max) * value\n  }\n\n  return (\n    <RangeContext.Provider\n      value={{\n        handlePointerDown,\n        handlePointerMove,\n        handlePointerUp,\n        setBarWidth,\n        getGrabberPosition,\n        currentValues,\n        setCurrentValues,\n      }}\n    >\n      {children}\n    </RangeContext.Provider>\n  )\n}\n",
      "path": "ui/range.tsx",
      "target": "components/ui/range.tsx"
    }
  ]
}