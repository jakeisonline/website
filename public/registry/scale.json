{
  "name": "scale",
  "type": "registry:ui",
  "description": "A scale component",
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport React, { forwardRef, useEffect } from \"react\"\nimport {\n  ScaleContextProvider,\n  useScaleContext,\n} from \"@/hooks/use-scale\"\nimport { cn } from \"@/lib/utils\"\n\ninterface ScaleProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  children: React.ReactNode\n  className?: string\n}\n\nexport const Scale = forwardRef<HTMLDivElement, ScaleProps>(\n  ({ children, className, ...props }, ref) => (\n    <ScaleContextProvider>\n      <div ref={ref} className={cn(\"w-full\", className)} {...props}>\n        <div className=\"flex min-h-8 w-full justify-center py-4\">\n          <div className=\"relative flex h-1 w-11/12 flex-none touch-none flex-row items-center rounded-full bg-blue-100\">\n            <ScaleFill />\n            <ScaleFieldset className=\"absolute flex w-full justify-between\">\n              {children}\n            </ScaleFieldset>\n          </div>\n        </div>\n      </div>\n    </ScaleContextProvider>\n  ),\n)\nScale.displayName = \"Scale\"\n\ninterface ScaleFieldsetProps\n  extends React.ComponentPropsWithoutRef<\"fieldset\"> {\n  children: React.ReactNode\n}\n\nexport const ScaleFieldset = forwardRef<\n  HTMLFieldSetElement,\n  ScaleFieldsetProps\n>(({ children, ...props }, ref) => {\n  const { setTotalSteps, updateSelectedIndex } = useScaleContext()\n  const childCount = React.Children.count(children)\n\n  const childrenWithIndex = React.Children.map(children, (child, index) => {\n    if (!React.isValidElement(child)) return null\n\n    if (\n      typeof child.type === \"function\" &&\n      (child.type as React.ComponentType).displayName !== \"ScaleStep\"\n    ) {\n      throw new Error(\"Invalid child type, only ScaleStep is allowed\")\n    }\n\n    return React.cloneElement(child as React.ReactElement, {\n      index,\n    })\n  })\n\n  useEffect(() => {\n    React.Children.forEach(children, (child, index) => {\n      if (React.isValidElement(child) && child.props.defaultChecked) {\n        updateSelectedIndex(index)\n      }\n    })\n  }, [])\n\n  setTotalSteps(childCount)\n\n  return (\n    <fieldset ref={ref} {...props}>\n      {childrenWithIndex}\n    </fieldset>\n  )\n})\nScaleFieldset.displayName = \"ScaleFieldset\"\n\nexport const ScaleFill = () => {\n  const { selectedIndex, getTotalSteps } = useScaleContext()\n  const totalSteps = getTotalSteps()\n\n  if (!selectedIndex || !totalSteps) return\n\n  const fillWidth = (selectedIndex / (totalSteps - 1)) * 100\n\n  return <div style={{ width: `${fillWidth}%` }} className=\"h-1 bg-blue-600\" />\n}\nScaleFill.displayName = \"ScaleFill\"\n\ninterface ScaleStepProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  id: string\n  label: string\n  name: string\n  index?: number\n}\n\nexport const ScaleStep = forwardRef<HTMLDivElement, ScaleStepProps>(\n  ({ index, id, label, name, ...props }, ref) => {\n    if (index === undefined) throw new Error(\"Index is required\")\n\n    const { updateSelectedIndex, selectedIndex } = useScaleContext()\n    const shouldBeSelected = selectedIndex > index\n\n    const handleChange = () => {\n      updateSelectedIndex(index)\n    }\n\n    return (\n      <div ref={ref} className=\"relative flex flex-col items-center\">\n        <input\n          onChange={handleChange}\n          data-index={index}\n          type=\"radio\"\n          id={id}\n          name={name}\n          className={cn(\n            \"peer h-4 w-4 appearance-none rounded-full border-4 border-background bg-blue-100 checked:border-blue-600 checked:bg-background hover:cursor-pointer\",\n            shouldBeSelected && \"bg-blue-600\",\n          )}\n          {...props}\n        />\n        <label\n          htmlFor={id}\n          className=\"absolute bottom-5 text-center leading-tight hover:cursor-pointer peer-checked:font-bold\"\n        >\n          {label}\n        </label>\n      </div>\n    )\n  },\n)\nScaleStep.displayName = \"ScaleStep\"\n",
      "path": "ui/scale.tsx",
      "target": "components/ui/scale.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { createContext, useContext, useRef, useState } from \"react\"\n\ninterface ScaleContextType {\n  updateSelectedIndex: (index: number) => void\n  setTotalSteps: (count: number) => void\n  selectedIndex: number\n  getTotalSteps: () => number\n}\n\nconst ScaleContext = createContext<ScaleContextType>({\n  updateSelectedIndex: () => {},\n  setTotalSteps: () => {},\n  selectedIndex: 0,\n  getTotalSteps: () => 0,\n})\n\nexport const useScaleContext = () => {\n  const context = useContext(ScaleContext)\n\n  if (!context) {\n    throw new Error(\n      \"useScaleContext must be used within a ScaleContextProvider\",\n    )\n  }\n\n  return context\n}\n\ninterface ScaleContextProviderProps {\n  children: React.ReactElement\n}\n\nexport const ScaleContextProvider = ({\n  children,\n}: ScaleContextProviderProps) => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const totalSteps = useRef(0)\n\n  const getTotalSteps = () => {\n    return totalSteps.current\n  }\n\n  const setTotalSteps = (count: number) => {\n    totalSteps.current = count\n  }\n\n  const updateSelectedIndex = (index: number) => {\n    setSelectedIndex(index)\n  }\n\n  const contextValue = {\n    updateSelectedIndex,\n    setTotalSteps,\n    selectedIndex,\n    getTotalSteps,\n  }\n\n  return (\n    <ScaleContext.Provider value={contextValue}>\n      {children}\n    </ScaleContext.Provider>\n  )\n}\n",
      "path": "hooks/use-scale.tsx",
      "target": "hooks/use-scale.tsx"
    }
  ]
}